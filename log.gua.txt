21:21:50 完整请求
21:21:50 请求结束
21:21:50 cookie ['']
21:21:50 path and query /todo/index {}
21:21:50 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:21:51 完整请求
21:21:51 请求结束
21:21:51 cookie ['']
21:21:51 path and query /static {'file': 'gua.js'}
21:21:51 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
21:21:51 完整请求
21:21:51 请求结束
21:21:51 cookie ['']
21:21:51 path and query /static {'file': 'todo.js'}
21:21:51 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:21:51 完整请求
21:21:51 请求结束
21:21:51 cookie ['']
21:21:51 path and query /api/todo/all {}
21:21:51 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  }
]
09:11:15 完整请求
09:11:15 请求结束
09:11:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:11:15 path and query / {}
09:11:15 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


09:11:15 完整请求
09:11:15 请求结束
09:11:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:11:15 path and query /todo/index {}
09:11:15 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
09:11:15 完整请求
09:11:15 完整请求
09:11:15 请求结束
09:11:15 请求结束
09:11:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:11:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:11:15 path and query /static {'file': 'gua.js'}
09:11:15 path and query /static {'file': 'todo.js'}
09:11:15 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
09:11:15 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
09:11:15 完整请求
09:11:15 请求结束
09:11:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:11:15 path and query /api/todo/all {}
09:11:15 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  }
]
09:11:16 完整请求
09:11:16 请求结束
09:11:16 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:11:16 path and query /favicon.ico {}
09:11:16 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
09:11:19 完整请求
09:11:19 请求结束
09:11:19 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:11:19 path and query /api/todo/add {}
09:11:19 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "111",
  "completed": false,
  "ct": 1514250679,
  "ut": 1514250679
}
09:18:11 完整请求
09:18:11 请求结束
09:18:11 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:18:11 path and query /api/todo/add {}
09:18:11 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "111",
  "completed": false,
  "ct": 1514251091,
  "ut": 1514251091
}
09:18:11 完整请求
09:18:11 请求结束
09:18:11 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:18:11 path and query /api/todo/add {}
09:18:11 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "111",
  "completed": false,
  "ct": 1514251091,
  "ut": 1514251091
}
09:18:12 完整请求
09:18:12 请求结束
09:18:12 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:18:12 path and query /api/todo/add {}
09:18:12 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "title": "111",
  "completed": false,
  "ct": 1514251092,
  "ut": 1514251092
}
09:18:12 完整请求
09:18:12 请求结束
09:18:12 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:18:12 path and query /api/todo/add {}
09:18:12 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "title": "111",
  "completed": false,
  "ct": 1514251092,
  "ut": 1514251092
}
09:18:12 完整请求
09:18:12 请求结束
09:18:12 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:18:12 path and query /api/todo/add {}
09:18:12 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "title": "111",
  "completed": false,
  "ct": 1514251092,
  "ut": 1514251092
}
09:18:12 完整请求
09:18:12 请求结束
09:18:12 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:18:12 path and query /api/todo/add {}
09:18:12 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "title": "111",
  "completed": false,
  "ct": 1514251092,
  "ut": 1514251092
}
09:18:13 完整请求
09:18:13 请求结束
09:18:13 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:18:13 path and query /api/todo/add {}
09:18:13 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "title": "111",
  "completed": false,
  "ct": 1514251093,
  "ut": 1514251093
}
09:18:13 完整请求
09:18:13 请求结束
09:18:13 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:18:13 path and query /api/todo/add {}
09:18:13 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "title": "111",
  "completed": false,
  "ct": 1514251093,
  "ut": 1514251093
}
09:18:13 完整请求
09:18:13 请求结束
09:18:13 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:18:13 path and query /api/todo/add {}
09:18:13 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "title": "111",
  "completed": false,
  "ct": 1514251093,
  "ut": 1514251093
}
09:18:13 完整请求
09:18:13 请求结束
09:18:13 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
09:18:13 path and query /api/todo/add {}
09:18:13 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "title": "111",
  "completed": false,
  "ct": 1514251093,
  "ut": 1514251093
}
09:18:37 完整请求
09:18:37 请求结束
11:59:37 完整请求
11:59:37 请求结束
11:59:37 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
11:59:37 path and query / {}
11:59:37 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


11:59:37 完整请求
11:59:37 请求结束
11:59:37 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
11:59:37 path and query /todo/index {}
11:59:37 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
11:59:37 完整请求
11:59:37 完整请求
11:59:37 请求结束
11:59:37 请求结束
11:59:37 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
11:59:37 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
11:59:37 path and query /static {'file': 'todo.js'}
11:59:37 path and query /static {'file': 'gua.js'}
11:59:37 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
11:59:37 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
11:59:37 完整请求
11:59:37 请求结束
11:59:37 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
11:59:37 path and query /api/todo/all {}
11:59:37 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  }
]
12:01:15 完整请求
12:01:15 请求结束
12:03:53 完整请求
12:03:53 请求结束
12:03:53 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:03:53 path and query /api/todo/add {}
12:03:53 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 14,
  "title": "123123",
  "completed": false,
  "ct": 1514261033,
  "ut": 1514261033
}
12:04:07 完整请求
12:04:07 请求结束
12:17:53 完整请求
12:17:53 请求结束
12:17:53 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:17:53 path and query /todo/index {}
12:17:53 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:17:53 完整请求
12:17:53 完整请求
12:17:53 请求结束
12:17:53 请求结束
12:17:53 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:17:53 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:17:53 path and query /static {'file': 'gua.js'}
12:17:53 path and query /static {'file': 'todo.js'}
12:17:53 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:17:53 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:18:06 完整请求
12:18:06 完整请求
12:18:06 完整请求
12:18:06 请求结束
12:18:06 请求结束
12:18:06 请求结束
12:18:06 完整请求
12:18:06 请求结束
12:18:06 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:18:06 path and query /api/todo/add {}
12:18:06 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 15,
  "title": "55",
  "completed": false,
  "ct": 1514261886,
  "ut": 1514261886
}
12:19:11 完整请求
12:19:11 请求结束
12:19:11 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:19:11 path and query /todo/index {}
12:19:11 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:19:11 完整请求
12:19:11 完整请求
12:19:11 请求结束
12:19:11 请求结束
12:19:11 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:19:11 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:19:11 path and query /static {'file': 'gua.js'}
12:19:11 path and query /static {'file': 'todo.js'}
12:19:11 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:19:11 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:19:19 完整请求
12:19:19 请求结束
12:19:19 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:19:19 path and query /api/todo/add {}
12:19:19 完整请求
12:19:19 请求结束
12:19:19 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:19:19 path and query /api/todo/add {}
12:19:21 完整请求
12:19:21 请求结束
12:19:21 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:19:21 path and query /api/todo/add {}
12:19:21 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 16,
  "title": "111",
  "completed": false,
  "ct": 1514261961,
  "ut": 1514261961
}
12:19:21 完整请求
12:19:21 请求结束
12:19:21 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:19:21 path and query /api/todo/add {}
12:19:21 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 17,
  "title": "111",
  "completed": false,
  "ct": 1514261961,
  "ut": 1514261961
}
12:21:22 完整请求
12:21:22 请求结束
12:21:22 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:21:22 path and query /api/todo/add {}
12:21:25 完整请求
12:21:25 请求结束
12:21:25 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:21:25 path and query /todo/index {}
12:21:25 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:21:26 完整请求
12:21:26 完整请求
12:21:26 请求结束
12:21:26 请求结束
12:21:26 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:21:26 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:21:26 path and query /static {'file': 'todo.js'}
12:21:26 path and query /static {'file': 'gua.js'}
12:21:26 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:21:26 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:21:38 完整请求
12:21:38 请求结束
12:21:39 完整请求
12:21:39 请求结束
12:21:39 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:21:39 path and query /todo/index {}
12:21:39 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:21:39 完整请求
12:21:39 完整请求
12:21:39 请求结束
12:21:39 请求结束
12:21:39 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:21:39 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:21:39 path and query /static {'file': 'todo.js'}
12:21:39 path and query /static {'file': 'gua.js'}
12:21:39 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:21:39 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:21:47 完整请求
12:21:47 请求结束
12:21:47 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:21:47 path and query /todo/index {}
12:21:47 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:21:47 完整请求
12:21:47 请求结束
12:21:47 请求结束
12:21:47 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:21:47 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:21:47 path and query /static {'file': 'todo.js'}
12:21:47 path and query /static {'file': 'gua.js'}
12:21:47 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:21:47 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:22:28 完整请求
12:22:28 请求结束
12:22:28 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:22:28 path and query /todo/index {}
12:22:28 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:22:28 完整请求
12:22:28 完整请求
12:22:28 请求结束
12:22:28 请求结束
12:22:28 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:22:28 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:22:28 path and query /static {'file': 'gua.js'}
12:22:28 path and query /static {'file': 'todo.js'}
12:22:28 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:22:28 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:22:48 完整请求
12:22:48 请求结束
12:22:48 请求结束
12:22:48 完整请求
12:22:48 请求结束
12:22:48 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:22:48 path and query /api/todo/add {}
12:22:48 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "title": "111",
  "completed": false,
  "ct": 1514262168,
  "ut": 1514262168
}
12:22:59 完整请求
12:22:59 请求结束
12:24:44 完整请求
12:24:44 请求结束
12:24:44 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:24:44 path and query /todo/index {}
12:24:44 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:24:44 完整请求
12:24:44 请求结束
12:24:44 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:24:44 path and query /static {'file': 'gua.js'}
12:24:44 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:24:44 完整请求
12:24:44 请求结束
12:24:44 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:24:44 path and query /static {'file': 'todo.js'}
12:24:44 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:26:44 完整请求
12:26:44 请求结束
12:26:44 完整请求
12:26:44 请求结束
12:26:44 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:26:44 path and query /api/todo/add {}
12:26:44 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 19,
  "title": "111",
  "completed": false,
  "ct": 1514262404,
  "ut": 1514262404
}
12:29:22 完整请求
12:29:22 请求结束
12:29:22 完整请求
12:29:22 请求结束
12:29:22 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:29:22 path and query /todo/index {}
12:29:22 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:29:22 完整请求
12:29:22 请求结束
12:29:22 请求结束
12:29:22 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:29:22 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
12:29:22 path and query /static {'file': 'todo.js'}
12:29:22 path and query /static {'file': 'gua.js'}
12:29:22 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:29:22 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:31:30 完整请求
12:31:30 完整请求
12:31:30 完整请求
12:31:30 请求结束
12:31:30 请求结束
12:31:30 请求结束
12:32:14 完整请求
12:32:14 请求结束
12:32:14 cookie ['']
12:32:14 path and query /todo/index {}
12:32:14 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:32:14 完整请求
12:32:14 请求结束
12:32:14 cookie ['']
12:32:14 path and query /static {'file': 'gua.js'}
12:32:14 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:32:14 完整请求
12:32:14 请求结束
12:32:14 cookie ['']
12:32:14 path and query /static {'file': 'todo.js'}
12:32:14 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:32:14 完整请求
12:32:14 请求结束
12:32:14 cookie ['']
12:32:14 path and query /favicon.ico {}
12:32:14 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:32:55 完整请求
12:32:55 请求结束
12:32:55 cookie ['']
12:32:55 path and query /api/todo/add {}
12:32:55 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 20,
  "title": "111",
  "completed": false,
  "ct": 1514262775,
  "ut": 1514262775
}
12:38:26 完整请求
12:38:26 请求结束
12:38:26 cookie ['']
12:38:26 path and query /todo/index {}
12:38:26 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:38:26 完整请求
12:38:26 请求结束
12:38:26 cookie ['']
12:38:26 path and query /static {'file': 'gua.js'}
12:38:26 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:38:26 完整请求
12:38:26 请求结束
12:38:26 cookie ['']
12:38:26 path and query /static {'file': 'todo.js'}
12:38:26 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:41:51 完整请求
12:41:51 请求结束
12:41:51 cookie ['']
12:41:51 path and query /todo/index {}
12:41:51 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:41:51 完整请求
12:41:51 请求结束
12:41:51 cookie ['']
12:41:51 path and query /static {'file': 'gua.js'}
12:41:51 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:41:51 完整请求
12:41:51 请求结束
12:41:51 cookie ['']
12:41:51 path and query /static {'file': 'todo.js'}
12:41:51 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()

}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:41:51 完整请求
12:41:51 请求结束
12:41:51 cookie ['']
12:41:51 path and query /api/todo/all {}
12:41:51 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  }
]
12:42:26 完整请求
12:42:26 请求结束
12:42:26 cookie ['']
12:42:26 path and query /todo/index {}
12:42:26 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:42:26 完整请求
12:42:26 请求结束
12:42:26 cookie ['']
12:42:26 path and query /static {'file': 'gua.js'}
12:42:26 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:42:26 完整请求
12:42:26 请求结束
12:42:26 cookie ['']
12:42:26 path and query /static {'file': 'todo.js'}
12:42:26 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:42:50 完整请求
12:42:50 请求结束
12:42:50 cookie ['']
12:42:50 path and query /todo/index {}
12:42:50 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:42:50 完整请求
12:42:50 请求结束
12:42:50 cookie ['']
12:42:50 path and query /static {'file': 'gua.js'}
12:42:50 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
12:42:50 完整请求
12:42:50 请求结束
12:42:50 cookie ['']
12:42:50 path and query /static {'file': 'todo.js'}
12:42:50 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:42:50 完整请求
12:42:50 请求结束
12:42:50 cookie ['']
12:42:50 path and query /api/todo/all {}
12:42:50 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  }
]
14:03:27 完整请求
14:03:27 请求结束
14:03:27 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453']
14:03:27 path and query /api/todo/add {}
14:03:27 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 21,
  "title": "1231",
  "completed": false,
  "ct": 1514268207,
  "ut": 1514268207
}
14:29:25 完整请求
14:29:25 请求结束
14:59:42 完整请求
14:59:42 请求结束
14:59:42 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
14:59:42 path and query / {}
14:59:42 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


14:59:42 完整请求
14:59:42 请求结束
14:59:42 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
14:59:42 path and query /todo/index {}
14:59:42 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
14:59:42 完整请求
14:59:42 完整请求
14:59:42 请求结束
14:59:42 请求结束
14:59:42 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
14:59:42 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
14:59:42 path and query /static {'file': 'gua.js'}
14:59:42 path and query /static {'file': 'todo.js'}
14:59:42 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
14:59:42 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
14:59:42 完整请求
14:59:42 请求结束
14:59:42 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
14:59:42 path and query /api/todo/all {}
14:59:42 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
15:09:30 完整请求
15:09:30 请求结束
15:09:30 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:09:30 path and query /todo/index {}
15:09:30 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:09:30 完整请求
15:09:30 完整请求
15:09:30 请求结束
15:09:30 请求结束
15:09:30 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:09:30 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:09:30 path and query /static {'file': 'gua.js'}
15:09:30 path and query /static {'file': 'todo.js'}
15:09:30 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
15:09:30 HTTP/1.1 200 OK

var todoTemplate = function(title) {
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

// var bindEventTodoDelete = function () {
//     var todoList = e('.todo-list')
//     todoList.addEventListener('click', function (event) {
//         var self = envet.target()
//         if(self.classList.contains('todo-delete')){
//             var todoCell = self.parentElement
//             var todo_id =
//         }
//     })
//
//
//
// }

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:09:30 完整请求
15:09:30 请求结束
15:09:30 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:09:30 path and query /api/todo/all {}
15:09:30 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
15:09:42 完整请求
15:09:42 请求结束
15:09:43 完整请求
15:09:43 请求结束
15:09:43 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:09:43 path and query /todo/index {}
15:09:43 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:09:43 完整请求
15:09:43 完整请求
15:09:43 请求结束
15:09:43 请求结束
15:09:43 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:09:43 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:09:43 path and query /static {'file': 'gua.js'}
15:09:43 path and query /static {'file': 'todo.js'}
15:09:43 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
15:09:43 HTTP/1.1 200 OK

var todoTemplate = function(title) {
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

// var bindEventTodoDelete = function () {
//     var todoList = e('.todo-list')
//     todoList.addEventListener('click', function (event) {
//         var self = envet.target()
//         if(self.classList.contains('todo-delete')){
//             var todoCell = self.parentElement
//             var todo_id =
//         }
//     })
//
//
//
// }

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:09:43 完整请求
15:09:43 请求结束
15:09:43 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:09:43 path and query /api/todo/all {}
15:09:43 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
15:10:40 完整请求
15:10:40 请求结束
15:10:40 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:10:40 path and query /todo/index {}
15:10:40 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:10:40 完整请求
15:10:40 完整请求
15:10:40 请求结束
15:10:40 请求结束
15:10:40 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:10:40 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:10:40 path and query /static {'file': 'gua.js'}
15:10:40 path and query /static {'file': 'todo.js'}
15:10:40 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
15:10:40 HTTP/1.1 200 OK

var todoTemplate = function(title) {
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

// var bindEventTodoDelete = function () {
//     var todoList = e('.todo-list')
//     todoList.addEventListener('click', function (event) {
//         var self = envet.target()
//         if(self.classList.contains('todo-delete')){
//             var todoCell = self.parentElement
//             var todo_id =
//         }
//     })
//
//
//
// }

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:10:40 完整请求
15:10:40 请求结束
15:10:40 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:10:40 path and query /api/todo/all {}
15:10:40 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
15:11:17 完整请求
15:11:17 请求结束
15:12:00 完整请求
15:12:00 请求结束
15:12:00 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:12:00 path and query /todo/index {}
15:12:00 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:12:00 完整请求
15:12:00 完整请求
15:12:00 请求结束
15:12:00 请求结束
15:12:00 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:12:00 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:12:00 path and query /static {'file': 'gua.js'}
15:12:00 path and query /static {'file': 'todo.js'}
15:12:00 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
15:12:00 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

// var bindEventTodoDelete = function () {
//     var todoList = e('.todo-list')
//     todoList.addEventListener('click', function (event) {
//         var self = envet.target()
//         if(self.classList.contains('todo-delete')){
//             var todoCell = self.parentElement
//             var todo_id =
//         }
//     })
//
//
//
// }

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:12:00 完整请求
15:12:00 请求结束
15:12:00 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:12:00 path and query /api/todo/all {}
15:12:00 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
15:12:07 完整请求
15:12:07 请求结束
15:12:07 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:12:07 path and query /todo/index {}
15:12:07 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:12:08 完整请求
15:12:08 完整请求
15:12:08 请求结束
15:12:08 请求结束
15:12:08 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:12:08 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:12:08 path and query /static {'file': 'gua.js'}
15:12:08 path and query /static {'file': 'todo.js'}
15:12:08 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
15:12:08 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

// var bindEventTodoDelete = function () {
//     var todoList = e('.todo-list')
//     todoList.addEventListener('click', function (event) {
//         var self = envet.target()
//         if(self.classList.contains('todo-delete')){
//             var todoCell = self.parentElement
//             var todo_id =
//         }
//     })
//
//
//
// }

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:12:08 完整请求
15:12:08 请求结束
15:12:08 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:12:08 path and query /api/todo/all {}
15:12:08 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
15:13:44 完整请求
15:13:44 请求结束
15:13:44 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:13:44 path and query /todo/index {}
15:13:44 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:13:44 完整请求
15:13:44 完整请求
15:13:44 请求结束
15:13:44 请求结束
15:13:44 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:13:44 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:13:44 path and query /static {'file': 'gua.js'}
15:13:44 path and query /static {'file': 'todo.js'}
15:13:44 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
15:13:44 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

// var bindEventTodoDelete = function () {
//     var todoList = e('.todo-list')
//     todoList.addEventListener('click', function (event) {
//         var self = envet.target()
//         if(self.classList.contains('todo-delete')){
//             var todoCell = self.parentElement
//             var todo_id =
//         }
//     })
//
//
//
// }

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:13:44 完整请求
15:13:44 请求结束
15:13:44 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:13:44 path and query /api/todo/all {}
15:13:44 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
15:13:54 完整请求
15:13:54 请求结束
15:13:54 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:13:54 path and query /todo/index {}
15:13:54 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:13:54 完整请求
15:13:54 完整请求
15:13:54 请求结束
15:13:54 请求结束
15:13:54 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:13:54 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:13:54 path and query /static {'file': 'gua.js'}
15:13:54 path and query /static {'file': 'todo.js'}
15:13:54 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
15:13:54 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

// var bindEventTodoDelete = function () {
//     var todoList = e('.todo-list')
//     todoList.addEventListener('click', function (event) {
//         var self = envet.target()
//         if(self.classList.contains('todo-delete')){
//             var todoCell = self.parentElement
//             var todo_id =
//         }
//     })
//
//
//
// }

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:13:54 完整请求
15:13:54 请求结束
15:13:54 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:13:54 path and query /api/todo/all {}
15:13:54 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
15:14:18 完整请求
15:14:18 请求结束
15:14:18 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:14:18 path and query /todo/index {}
15:14:18 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:14:18 完整请求
15:14:18 完整请求
15:14:18 请求结束
15:14:18 请求结束
15:14:18 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:14:18 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:14:18 path and query /static {'file': 'gua.js'}
15:14:18 path and query /static {'file': 'todo.js'}
15:14:18 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
15:14:18 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

// var bindEventTodoDelete = function () {
//     var todoList = e('.todo-list')
//     todoList.addEventListener('click', function (event) {
//         var self = envet.target()
//         if(self.classList.contains('todo-delete')){
//             var todoCell = self.parentElement
//             var todo_id =
//         }
//     })
//
//
//
// }

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:14:18 完整请求
15:14:18 请求结束
15:14:18 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
15:14:18 path and query /api/todo/all {}
15:14:18 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
15:15:00 完整请求
15:15:00 请求结束
16:16:58 完整请求
16:16:58 请求结束
16:16:58 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:16:58 path and query /todo/index {}
16:16:58 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:16:58 完整请求
16:16:58 完整请求
16:16:58 请求结束
16:16:58 请求结束
16:16:58 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:16:58 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:16:58 path and query /static {'file': 'gua.js'}
16:16:58 path and query /static {'file': 'todo.js'}
16:16:58 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = 'api/todo/delete?id=' + id
    ajax('GET', path, '', callback)

}
16:16:58 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = envet.target()
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:16:58 完整请求
16:16:58 请求结束
16:16:58 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:16:58 path and query /api/todo/all {}
16:16:58 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
16:17:12 完整请求
16:17:12 请求结束
16:17:13 完整请求
16:17:13 请求结束
16:17:13 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:17:13 path and query /todo/index {}
16:17:13 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:17:13 完整请求
16:17:13 请求结束
16:17:13 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:17:13 path and query /static {'file': 'gua.js'}
16:17:13 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = 'api/todo/delete?id=' + id
    ajax('GET', path, '', callback)

}
16:17:13 完整请求
16:17:13 请求结束
16:17:13 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:17:13 path and query /static {'file': 'todo.js'}
16:17:13 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = envet.target()
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    // bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:17:13 完整请求
16:17:13 请求结束
16:17:13 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:17:13 path and query /api/todo/all {}
16:17:13 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
16:18:55 完整请求
16:18:55 请求结束
16:18:55 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:18:55 path and query /todo/index {}
16:18:55 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:18:55 完整请求
16:18:55 请求结束
16:18:55 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:18:55 path and query /static {'file': 'gua.js'}
16:18:55 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = 'api/todo/delete?id=' + id
    ajax('GET', path, '', callback)

}
16:18:55 完整请求
16:18:55 请求结束
16:18:55 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:18:55 path and query /static {'file': 'todo.js'}
16:18:55 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = envet.target()
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:18:55 完整请求
16:18:55 请求结束
16:18:55 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:18:55 path and query /api/todo/all {}
16:18:55 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
16:19:27 完整请求
16:19:27 请求结束
16:19:27 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:19:27 path and query /todo/index {}
16:19:27 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:19:27 完整请求
16:19:27 请求结束
16:19:27 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:19:27 path and query /static {'file': 'gua.js'}
16:19:27 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = 'api/todo/delete?id=' + id
    ajax('GET', path, '', callback)

}
16:19:27 完整请求
16:19:27 请求结束
16:19:27 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:19:27 path and query /static {'file': 'todo.js'}
16:19:27 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target()
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:19:27 完整请求
16:19:27 请求结束
16:19:27 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:19:27 path and query /api/todo/all {}
16:19:27 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
16:19:53 完整请求
16:19:53 请求结束
16:19:53 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:19:53 path and query /todo/index {}
16:19:53 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:19:53 完整请求
16:19:53 请求结束
16:19:53 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:19:53 path and query /static {'file': 'gua.js'}
16:19:53 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = 'api/todo/delete?id=' + id
    ajax('GET', path, '', callback)

}
16:19:53 完整请求
16:19:53 请求结束
16:19:53 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:19:53 path and query /static {'file': 'todo.js'}
16:19:53 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:19:53 完整请求
16:19:53 请求结束
16:19:53 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:19:53 path and query /api/todo/all {}
16:19:53 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
16:19:55 完整请求
16:19:55 请求结束
16:19:55 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:19:55 path and query /todo/api/todo/delete {'id': '2'}
16:19:55 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:19:57 完整请求
16:19:57 请求结束
16:19:57 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:19:57 path and query /todo/api/todo/delete {'id': '21'}
16:19:57 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:19:59 完整请求
16:19:59 请求结束
16:19:59 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:19:59 path and query /todo/api/todo/delete {'id': '3'}
16:19:59 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:01 完整请求
16:20:01 请求结束
16:20:01 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:01 path and query /todo/api/todo/delete {'id': '14'}
16:20:01 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:01 完整请求
16:20:01 请求结束
16:20:01 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:01 path and query /todo/api/todo/delete {'id': '16'}
16:20:01 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:02 完整请求
16:20:02 请求结束
16:20:02 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:02 path and query /todo/api/todo/delete {'id': '15'}
16:20:02 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:02 完整请求
16:20:02 请求结束
16:20:02 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:02 path and query /todo/api/todo/delete {'id': '13'}
16:20:02 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:02 完整请求
16:20:02 请求结束
16:20:02 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:02 path and query /todo/api/todo/delete {'id': '11'}
16:20:02 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:03 完整请求
16:20:03 请求结束
16:20:03 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:03 path and query /todo/api/todo/delete {'id': '10'}
16:20:03 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:03 完整请求
16:20:03 请求结束
16:20:03 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:03 path and query /todo/api/todo/delete {'id': '8'}
16:20:03 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:03 完整请求
16:20:03 请求结束
16:20:03 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:03 path and query /todo/api/todo/delete {'id': '18'}
16:20:03 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:03 完整请求
16:20:03 请求结束
16:20:03 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:03 path and query /todo/api/todo/delete {'id': '20'}
16:20:03 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:04 完整请求
16:20:04 请求结束
16:20:04 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:04 path and query /todo/api/todo/delete {'id': '12'}
16:20:04 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:04 完整请求
16:20:04 请求结束
16:20:04 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:04 path and query /todo/api/todo/delete {'id': '7'}
16:20:04 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:04 完整请求
16:20:04 请求结束
16:20:04 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:04 path and query /todo/api/todo/delete {'id': '6'}
16:20:04 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:04 完整请求
16:20:04 请求结束
16:20:04 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:04 path and query /todo/api/todo/delete {'id': '17'}
16:20:04 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:05 完整请求
16:20:05 请求结束
16:20:05 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:05 path and query /todo/api/todo/delete {'id': '19'}
16:20:05 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:05 完整请求
16:20:05 请求结束
16:20:05 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:05 path and query /todo/api/todo/delete {'id': '19'}
16:20:05 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:05 完整请求
16:20:05 请求结束
16:20:05 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:05 path and query /todo/api/todo/delete {'id': '9'}
16:20:05 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:05 完整请求
16:20:05 请求结束
16:20:05 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:05 path and query /todo/api/todo/delete {'id': '9'}
16:20:05 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:06 完整请求
16:20:06 请求结束
16:20:06 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:06 path and query /todo/api/todo/delete {'id': '5'}
16:20:06 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:06 完整请求
16:20:06 请求结束
16:20:06 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:20:06 path and query /todo/api/todo/delete {'id': '4'}
16:20:06 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:28 完整请求
16:20:28 请求结束
16:23:15 完整请求
16:23:15 请求结束
16:23:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:23:15 path and query /todo/index {}
16:23:15 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:23:15 完整请求
16:23:15 请求结束
16:23:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:23:15 path and query /static {'file': 'gua.js'}
16:23:15 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = 'api/todo/delete?id=' + id
    ajax('GET', path, '', callback)

}
16:23:15 完整请求
16:23:15 请求结束
16:23:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:23:15 path and query /static {'file': 'todo.js'}
16:23:15 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:23:15 完整请求
16:23:15 请求结束
16:23:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:23:15 path and query /api/todo/all {}
16:23:15 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
16:23:17 完整请求
16:23:17 请求结束
16:23:17 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:23:17 path and query /todo/api/todo/delete {'id': '3'}
16:23:17 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:23:34 完整请求
16:23:34 请求结束
16:31:51 完整请求
16:31:51 请求结束
16:31:51 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:31:51 path and query /todo/index {}
16:31:51 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:31:51 完整请求
16:31:51 请求结束
16:31:51 请求结束
16:31:51 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:31:51 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:31:51 path and query /static {'file': 'gua.js'}
16:31:51 path and query /static {'file': 'todo.js'}
16:31:51 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// var apiTodoDelete = function(id,callback) {
//     var path = 'api/todo/delete?id=' + id
//     ajax('GET', path, '', callback)
//
// }

var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:31:51 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:31:51 完整请求
16:31:51 请求结束
16:31:51 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:31:51 path and query /api/todo/all {}
16:31:51 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "foo",
    "completed": false,
    "ct": 1488959077,
    "ut": 1488959077
  },
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 9,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 10,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 11,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 12,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 13,
    "title": "111",
    "completed": false,
    "ct": 1514251093,
    "ut": 1514251093
  },
  {
    "id": 14,
    "title": "123123",
    "completed": false,
    "ct": 1514261033,
    "ut": 1514261033
  },
  {
    "id": 15,
    "title": "55",
    "completed": false,
    "ct": 1514261886,
    "ut": 1514261886
  },
  {
    "id": 16,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 17,
    "title": "111",
    "completed": false,
    "ct": 1514261961,
    "ut": 1514261961
  },
  {
    "id": 18,
    "title": "111",
    "completed": false,
    "ct": 1514262168,
    "ut": 1514262168
  },
  {
    "id": 19,
    "title": "111",
    "completed": false,
    "ct": 1514262404,
    "ut": 1514262404
  },
  {
    "id": 20,
    "title": "111",
    "completed": false,
    "ct": 1514262775,
    "ut": 1514262775
  },
  {
    "id": 21,
    "title": "1231",
    "completed": false,
    "ct": 1514268207,
    "ut": 1514268207
  }
]
16:31:52 完整请求
16:31:52 请求结束
16:31:52 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:31:52 path and query /api/todo/delete {'id': '8'}
16:31:52 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "title": "111",
  "completed": false,
  "ct": 1514251092,
  "ut": 1514251092
}
16:31:56 完整请求
16:31:56 请求结束
16:31:56 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:31:56 path and query /api/todo/delete {'id': '9'}
16:31:56 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "title": "111",
  "completed": false,
  "ct": 1514251092,
  "ut": 1514251092
}
16:31:58 完整请求
16:31:58 请求结束
16:31:58 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:31:58 path and query /api/todo/delete {'id': '10'}
16:31:58 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "title": "111",
  "completed": false,
  "ct": 1514251093,
  "ut": 1514251093
}
16:31:58 完整请求
16:31:58 请求结束
16:31:58 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:31:58 path and query /api/todo/delete {'id': '10'}
16:31:58 完整请求
16:31:58 请求结束
16:31:58 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:31:58 path and query /api/todo/delete {'id': '11'}
16:31:58 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "title": "111",
  "completed": false,
  "ct": 1514251093,
  "ut": 1514251093
}
16:31:59 完整请求
16:31:59 请求结束
16:31:59 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:31:59 path and query /api/todo/delete {'id': '12'}
16:31:59 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "title": "111",
  "completed": false,
  "ct": 1514251093,
  "ut": 1514251093
}
16:32:00 完整请求
16:32:00 请求结束
16:32:00 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:32:00 path and query /api/todo/delete {'id': '13'}
16:32:00 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "title": "111",
  "completed": false,
  "ct": 1514251093,
  "ut": 1514251093
}
16:32:00 完整请求
16:32:00 请求结束
16:32:00 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:32:00 path and query /api/todo/delete {'id': '14'}
16:32:00 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 14,
  "title": "123123",
  "completed": false,
  "ct": 1514261033,
  "ut": 1514261033
}
16:32:01 完整请求
16:32:01 请求结束
16:32:01 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:32:01 path and query /api/todo/delete {'id': '15'}
16:32:01 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 15,
  "title": "55",
  "completed": false,
  "ct": 1514261886,
  "ut": 1514261886
}
16:32:03 完整请求
16:32:03 请求结束
16:32:03 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:32:03 path and query /api/todo/delete {'id': '16'}
16:32:03 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 16,
  "title": "111",
  "completed": false,
  "ct": 1514261961,
  "ut": 1514261961
}
16:32:04 完整请求
16:32:04 请求结束
16:32:04 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:32:04 path and query /api/todo/delete {'id': '17'}
16:32:04 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 17,
  "title": "111",
  "completed": false,
  "ct": 1514261961,
  "ut": 1514261961
}
16:32:04 完整请求
16:32:04 请求结束
16:32:04 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:32:04 path and query /api/todo/delete {'id': '18'}
16:32:04 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "title": "111",
  "completed": false,
  "ct": 1514262168,
  "ut": 1514262168
}
16:32:06 完整请求
16:32:06 请求结束
16:32:06 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:32:06 path and query /api/todo/delete {'id': '19'}
16:32:06 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 19,
  "title": "111",
  "completed": false,
  "ct": 1514262404,
  "ut": 1514262404
}
16:32:06 完整请求
16:32:06 请求结束
16:32:06 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:32:06 path and query /api/todo/delete {'id': '20'}
16:32:06 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 20,
  "title": "111",
  "completed": false,
  "ct": 1514262775,
  "ut": 1514262775
}
16:32:07 完整请求
16:32:07 请求结束
16:32:07 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:32:07 path and query /api/todo/delete {'id': '21'}
16:32:07 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 21,
  "title": "1231",
  "completed": false,
  "ct": 1514268207,
  "ut": 1514268207
}
16:32:08 完整请求
16:32:08 请求结束
16:32:08 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:32:08 path and query /api/todo/delete {'id': '7'}
16:32:08 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "title": "111",
  "completed": false,
  "ct": 1514251092,
  "ut": 1514251092
}
16:32:08 完整请求
16:32:08 请求结束
16:32:08 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:32:08 path and query /api/todo/delete {'id': '7'}
16:32:43 完整请求
16:32:43 请求结束
16:33:09 完整请求
16:33:09 请求结束
16:33:09 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:33:09 path and query /api/todo/delete {'id': '2'}
16:33:09 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "foo",
  "completed": false,
  "ct": 1488959077,
  "ut": 1488959077
}
16:33:15 完整请求
16:33:15 请求结束
16:33:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:33:15 path and query /todo/index {}
16:33:15 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:33:15 完整请求
16:33:15 完整请求
16:33:15 请求结束
16:33:15 请求结束
16:33:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:33:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:33:15 path and query /static {'file': 'todo.js'}
16:33:15 path and query /static {'file': 'gua.js'}
16:33:15 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:33:15 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = 'api/todo/delete?id=' + id
    ajax('GET', path, '', callback)

}


16:33:15 完整请求
16:33:15 请求结束
16:33:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:33:15 path and query /api/todo/all {}
16:33:15 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  }
]
16:33:17 完整请求
16:33:17 请求结束
16:33:17 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:33:17 path and query /todo/api/todo/delete {'id': '6'}
16:33:17 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:34:15 完整请求
16:34:15 请求结束
16:34:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:34:15 path and query /todo/index {}
16:34:15 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:34:16 完整请求
16:34:16 请求结束
16:34:16 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:34:16 path and query /static {'file': 'gua.js'}
16:34:16 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = 'api/todo/delete?id=' + id
    log(path)
    ajax('GET', path, '', callback)

}


16:34:16 完整请求
16:34:16 请求结束
16:34:16 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:34:16 path and query /static {'file': 'todo.js'}
16:34:16 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:34:16 完整请求
16:34:16 请求结束
16:34:16 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:34:16 path and query /api/todo/all {}
16:34:16 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  }
]
16:34:18 完整请求
16:34:18 请求结束
16:34:18 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:34:18 path and query /todo/api/todo/delete {'id': '4'}
16:34:18 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:34:49 完整请求
16:34:49 请求结束
16:35:16 完整请求
16:35:16 请求结束
16:35:16 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:35:16 path and query /todo/index {}
16:35:16 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:35:16 完整请求
16:35:16 请求结束
16:35:16 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:35:16 path and query /static {'file': 'gua.js'}
16:35:16 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = '/api/todo/delete?id=' + id
    log(path)
    ajax('GET', path, '', callback)

}


16:35:16 完整请求
16:35:16 请求结束
16:35:16 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:35:16 path and query /static {'file': 'todo.js'}
16:35:16 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:35:16 完整请求
16:35:16 请求结束
16:35:16 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:35:16 path and query /api/todo/all {}
16:35:16 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 3,
    "title": "111",
    "completed": false,
    "ct": 1514250679,
    "ut": 1514250679
  },
  {
    "id": 4,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  }
]
16:35:17 完整请求
16:35:17 请求结束
16:35:17 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:35:17 path and query /api/todo/delete {'id': '3'}
16:35:17 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "111",
  "completed": false,
  "ct": 1514250679,
  "ut": 1514250679
}
16:35:23 完整请求
16:35:23 请求结束
16:35:23 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:35:23 path and query /api/todo/delete {'id': '4'}
16:35:23 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "111",
  "completed": false,
  "ct": 1514251091,
  "ut": 1514251091
}
16:37:02 完整请求
16:37:02 请求结束
16:37:02 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:02 path and query /todo/index {}
16:37:02 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:37:02 完整请求
16:37:02 请求结束
16:37:02 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:02 path and query /static {'file': 'gua.js'}
16:37:02 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = '/api/todo/delete?id=' + id
    log(path)
    ajax('GET', path, '', callback)

}


16:37:02 完整请求
16:37:02 请求结束
16:37:02 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:02 path and query /static {'file': 'todo.js'}
16:37:02 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:37:02 完整请求
16:37:02 请求结束
16:37:02 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:02 path and query /api/todo/all {}
16:37:02 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  }
]
16:37:38 完整请求
16:37:38 请求结束
16:37:38 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:38 path and query /todo/index {}
16:37:38 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:37:38 完整请求
16:37:38 请求结束
16:37:38 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:38 path and query /static {'file': 'gua.js'}
16:37:38 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = '/api/todo/delete?id=' + id
    log(path)
    ajax('GET', path, '', callback)

}


16:37:38 完整请求
16:37:38 请求结束
16:37:38 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:38 path and query /static {'file': 'todo.js'}
16:37:38 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:37:38 完整请求
16:37:38 请求结束
16:37:38 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:38 path and query /api/todo/all {}
16:37:38 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  }
]
16:37:55 完整请求
16:37:55 请求结束
16:37:55 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:55 path and query /todo/index {}
16:37:55 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:37:55 完整请求
16:37:55 请求结束
16:37:55 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:55 path and query /static {'file': 'gua.js'}
16:37:55 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = '/api/todo/delete?id=' + id
    log(path)
    ajax('GET', path, '', callback)

}


16:37:55 完整请求
16:37:55 请求结束
16:37:55 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:55 path and query /static {'file': 'todo.js'}
16:37:55 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:37:55 完整请求
16:37:55 请求结束
16:37:55 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:37:55 path and query /api/todo/all {}
16:37:55 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  }
]
16:38:27 完整请求
16:38:27 请求结束
16:38:27 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:38:27 path and query /todo/index {}
16:38:27 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:38:27 完整请求
16:38:27 请求结束
16:38:27 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:38:27 path and query /static {'file': 'gua.js'}
16:38:27 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = '/api/todo/delete?id=' + id
    log(path)
    ajax('GET', path, '', callback)

}


16:38:27 完整请求
16:38:27 请求结束
16:38:27 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:38:27 path and query /static {'file': 'todo.js'}
16:38:27 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:38:27 完整请求
16:38:27 请求结束
16:38:27 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:38:27 path and query /api/todo/all {}
16:38:27 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  }
]
16:38:32 完整请求
16:38:32 请求结束
16:38:32 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:38:32 path and query /api/todo/add {}
16:38:32 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "title": "111",
  "completed": false,
  "ct": 1514277512,
  "ut": 1514277512
}
16:38:33 完整请求
16:38:33 请求结束
16:38:33 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:38:33 path and query /api/todo/add {}
16:39:28 完整请求
16:39:28 请求结束
16:39:28 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:39:28 path and query /api/todo/add {}
16:39:28 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "title": "111",
  "completed": false,
  "ct": 1514277568,
  "ut": 1514277568
}
16:39:35 完整请求
16:39:35 请求结束
16:39:35 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:39:35 path and query /todo/index {}
16:39:35 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:39:35 完整请求
16:39:35 完整请求
16:39:35 请求结束
16:39:35 请求结束
16:39:35 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:39:35 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:39:35 path and query /static {'file': 'todo.js'}
16:39:35 path and query /static {'file': 'gua.js'}
16:39:35 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:39:35 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = '/api/todo/delete?id=' + id
    log(path)
    ajax('GET', path, '', callback)

}


16:39:35 完整请求
16:39:35 请求结束
16:39:35 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:39:35 path and query /api/todo/all {}
16:39:35 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514277512,
    "ut": 1514277512
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514277568,
    "ut": 1514277568
  }
]
16:39:48 完整请求
16:39:48 完整请求
16:39:48 请求结束
16:39:48 请求结束
16:42:29 完整请求
16:42:29 请求结束
16:42:29 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:42:29 path and query /todo/index {}
16:42:29 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:42:29 完整请求
16:42:29 完整请求
16:42:29 请求结束
16:42:29 请求结束
16:42:29 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:42:29 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:42:29 path and query /static {'file': 'todo.js'}
16:42:29 path and query /static {'file': 'gua.js'}
16:42:29 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = '/api/todo/delete?id=' + id
    log(path)
    ajax('GET', path, '', callback)

}


16:42:29 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:42:30 完整请求
16:42:30 请求结束
16:42:30 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:42:30 path and query /api/todo/all {}
16:42:30 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514277512,
    "ut": 1514277512
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514277568,
    "ut": 1514277568
  }
]
16:43:13 完整请求
16:43:13 完整请求
16:43:13 请求结束
16:43:13 请求结束
16:43:32 完整请求
16:43:32 请求结束
16:43:32 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:32 path and query /todo/index {}
16:43:32 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:43:32 完整请求
16:43:32 请求结束
16:43:32 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:32 path and query /static {'file': 'gua.js'}
16:43:32 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = '/api/todo/delete?id=' + id
    log(path)
    ajax('GET', path, '', callback)

}


16:43:32 完整请求
16:43:32 请求结束
16:43:32 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:32 path and query /static {'file': 'todo.js'}
16:43:32 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:43:32 完整请求
16:43:32 请求结束
16:43:32 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:32 path and query /api/todo/all {}
16:43:32 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "title": "111",
    "completed": false,
    "ct": 1514251091,
    "ut": 1514251091
  },
  {
    "id": 6,
    "title": "111",
    "completed": false,
    "ct": 1514251092,
    "ut": 1514251092
  },
  {
    "id": 7,
    "title": "111",
    "completed": false,
    "ct": 1514277512,
    "ut": 1514277512
  },
  {
    "id": 8,
    "title": "111",
    "completed": false,
    "ct": 1514277568,
    "ut": 1514277568
  }
]
16:43:37 完整请求
16:43:37 请求结束
16:43:37 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:37 path and query /api/todo/delete {'id': '5'}
16:43:37 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "111",
  "completed": false,
  "ct": 1514251091,
  "ut": 1514251091
}
16:43:41 完整请求
16:43:41 请求结束
16:43:41 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:41 path and query /api/todo/delete {'id': '6'}
16:43:41 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "title": "111",
  "completed": false,
  "ct": 1514251092,
  "ut": 1514251092
}
16:43:43 完整请求
16:43:43 请求结束
16:43:43 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:43 path and query /api/todo/delete {'id': '8'}
16:43:43 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "title": "111",
  "completed": false,
  "ct": 1514277568,
  "ut": 1514277568
}
16:43:44 完整请求
16:43:44 请求结束
16:43:44 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:44 path and query /api/todo/delete {'id': '7'}
16:43:44 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "title": "111",
  "completed": false,
  "ct": 1514277512,
  "ut": 1514277512
}
16:43:46 完整请求
16:43:46 请求结束
16:43:46 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:46 path and query /api/todo/add {}
16:43:46 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "1111",
  "completed": false,
  "ct": 1514277826,
  "ut": 1514277826
}
16:43:50 完整请求
16:43:50 请求结束
16:43:50 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:50 path and query /api/todo/add {}
16:43:56 完整请求
16:43:56 请求结束
16:43:56 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:56 path and query /todo/index {}
16:43:56 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:43:57 完整请求
16:43:57 请求结束
16:43:57 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:57 path and query /static {'file': 'gua.js'}
16:43:57 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = '/api/todo/delete?id=' + id
    log(path)
    ajax('GET', path, '', callback)

}


16:43:57 完整请求
16:43:57 请求结束
16:43:57 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:57 path and query /static {'file': 'todo.js'}
16:43:57 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:43:57 完整请求
16:43:57 请求结束
16:43:57 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:57 path and query /api/todo/all {}
16:43:57 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "1111",
    "completed": false,
    "ct": 1514277826,
    "ut": 1514277826
  }
]
16:43:59 完整请求
16:43:59 请求结束
16:43:59 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:43:59 path and query /api/todo/add {}
16:43:59 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "2321",
  "completed": false,
  "ct": 1514277839,
  "ut": 1514277839
}
16:44:02 完整请求
16:44:02 请求结束
16:44:02 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:44:02 path and query /api/todo/add {}
16:44:04 完整请求
16:44:04 请求结束
16:44:04 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:44:04 path and query /api/todo/add {}
16:44:04 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "123",
  "completed": false,
  "ct": 1514277844,
  "ut": 1514277844
}
16:44:04 完整请求
16:44:04 请求结束
16:44:04 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:44:04 path and query /api/todo/add {}
16:44:04 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "123",
  "completed": false,
  "ct": 1514277844,
  "ut": 1514277844
}
16:44:05 完整请求
16:44:05 请求结束
16:44:05 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:44:05 path and query /api/todo/add {}
16:44:05 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "123",
  "completed": false,
  "ct": 1514277845,
  "ut": 1514277845
}
16:44:08 完整请求
16:44:08 请求结束
16:44:08 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:44:08 path and query /api/todo/add {}
16:44:12 完整请求
16:44:12 请求结束
16:44:12 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:44:12 path and query /todo/index {}
16:44:12 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:44:12 完整请求
16:44:12 请求结束
16:44:12 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:44:12 path and query /static {'file': 'gua.js'}
16:44:12 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

var apiTodoDelete = function(id,callback) {
    var path = '/api/todo/delete?id=' + id
    log(path)
    ajax('GET', path, '', callback)

}


16:44:12 完整请求
16:44:12 请求结束
16:44:12 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:44:12 path and query /static {'file': 'todo.js'}
16:44:12 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}


var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
     var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
            
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {

    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var todoList = e('.todo-list')
    todoList.addEventListener('click', function (event) {
        var self = event.target
        if(self.classList.contains('todo-delete')){
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                todoCell.remove()
            })

        }
    })



}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:44:12 完整请求
16:44:12 请求结束
16:44:12 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:44:12 path and query /api/todo/all {}
16:44:12 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "1111",
    "completed": false,
    "ct": 1514277826,
    "ut": 1514277826
  },
  {
    "id": 2,
    "title": "2321",
    "completed": false,
    "ct": 1514277839,
    "ut": 1514277839
  },
  {
    "id": 3,
    "title": "123",
    "completed": false,
    "ct": 1514277844,
    "ut": 1514277844
  },
  {
    "id": 4,
    "title": "123",
    "completed": false,
    "ct": 1514277844,
    "ut": 1514277844
  },
  {
    "id": 5,
    "title": "123",
    "completed": false,
    "ct": 1514277845,
    "ut": 1514277845
  }
]
16:44:15 完整请求
16:44:15 请求结束
16:44:15 cookie ['Pycharm-c9d0c0a9=26b2f2ad-9634-40a3-a672-87b3a3386453', 'user=lfdlfseclhbsj4f4']
16:44:15 path and query /api/todo/add {}
16:44:15 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "title": "2",
  "completed": false,
  "ct": 1514277855,
  "ut": 1514277855
}
16:45:19 完整请求
16:45:19 请求结束
